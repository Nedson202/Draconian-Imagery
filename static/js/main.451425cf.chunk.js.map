{"version":3,"sources":["Hoc/NetworkDetector.jsx","helper/images.js","content loaders/ImageLoader.jsx","ImageCard.jsx","App.js","serviceWorker.js","index.js"],"names":["ComposedComponent","images","id","image","size","width","height","ImageLoader","_this$props$size","this","props","react_default","a","createElement","react","react_content_loader_es","rtl","speed","primaryColor","x","y","rx","ry","Component","ImageCard","state","loadedErrorMessage","imageUrl","imageLoaded","handleImageLoadError","_this","setState","src","imageRenderedStatus","data","_this$state","length","content_loaders_ImageLoader","className","alt","onLoad","onError","imageData","renderImage","App","map","src_ImageCard","key","renderImages","NetworkDetector","_Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","isDisconnected","handleConnectionChange","navigator","onLine","webPing","setInterval","fetch","mode","then","clearInterval","catch","inherits","createClass","value","window","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.451425cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default function (ComposedComponent) {\n  class NetworkDetector extends Component {\n    state = {\n      isDisconnected: false\n    }\n\n    componentDidMount() {\n      this.handleConnectionChange();\n      window.addEventListener('online', this.handleConnectionChange);\n      window.addEventListener('offline', this.handleConnectionChange);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('online', this.handleConnectionChange);\n      window.removeEventListener('offline', this.handleConnectionChange);\n    }\n\n\n    handleConnectionChange = () => {\n      const condition = navigator.onLine ? 'online' : 'offline';\n      if (condition === 'online') {\n        const webPing = setInterval(\n          () => {\n            fetch('//google.com', {\n              mode: 'no-cors',\n              })\n            .then(() => {\n              this.setState({ isDisconnected: false }, () => {\n                return clearInterval(webPing)\n              });\n            }).catch(() => this.setState({ isDisconnected: true }) )\n          }, 2000);\n        return;\n      }\n\n      return this.setState({ isDisconnected: true });\n    }\n\n    render() {\n      const { isDisconnected } = this.state;\n      return (\n        <div>\n          { isDisconnected && (<div className=\"internet-error\">\n              <p>Internet connection lost</p>\n            </div>)\n          }\n          <ComposedComponent {...this.props} />\n        </div>\n      );\n    }\n  }\n\n  return NetworkDetector;\n}\n","const images = [\n  {\n    id: 1,\n    image: 'https://picsum.photos/200/300/?random',\n    size: {\n      width: 200,\n      height: 300,\n    }\n  },\n  {\n    id: 2,\n    image: 'https://picfsum.photos/230/300/?random',\n    size: {\n      width: 230,\n      height: 300,\n    }\n  },\n  {\n    id: 3,\n    image: 'https://picsum.photos/210/300/?random',\n    size: {\n      width: 210,\n      height: 300,\n    }\n  },\n  {\n    id: 4,\n    image: 'https://picsum.photos/240/300/?random',\n    size: {\n      width: 240,\n      height: 300,\n    }\n  },\n  {\n    id: 5,\n    image: 'https://picsum.photos/265/300/?random',\n    size: {\n      width: 265,\n      height: 300,\n    }\n  },\n  {\n    id: 6,\n    image: 'https://picsum.photos/255/300/?random',\n    size: {\n      width: 255,\n      height: 300,\n    }\n  },\n  {\n    id: 7,\n    image: 'https://picsfum.photos/250/300/?random',\n    size: {\n      width: 250,\n      height: 300,\n    }\n  },\n  {\n    id: 8,\n    image: 'https://picsum.photos/260/300/?random',\n    size: {\n      width: 260,\n      height: 300,\n    }\n  },\n];\n\nexport default images;","\nimport React, { Component, Fragment } from 'react';\nimport ContentLoader from 'react-content-loader';\n\nclass ImageLoader extends Component {\n  render() {\n    const { size: { height, width } } = this.props;\n    return (\n      <Fragment>\n        <ContentLoader\n          rtl\n          height={height}\n          width={width}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n        >\n          <rect x=\"0\" y=\"0\" rx=\"3\" ry=\"3\" width=\"201\" height=\"272\" />\n        </ContentLoader>\n      </Fragment>\n    );\n  }\n}\n\nexport default ImageLoader;","import React, { Component, Fragment } from \"react\";\nimport ImageLoader from \"./content loaders/ImageLoader\";\n\nclass ImageCard extends Component {\n  state = {\n    loadedErrorMessage: \"\",\n    imageUrl: \"\",\n    imageLoaded: false\n  };\n\n  renderImage(data) {\n    const { image, size } = data;\n    const { imageLoaded, loadedErrorMessage, imageUrl } = this.state;\n    return (\n      <Fragment>\n        {!imageLoaded && loadedErrorMessage.length === 0 && (\n          <ImageLoader size={size} />\n        )}\n        {loadedErrorMessage.length !== 0 && (\n          <span id=\"image-error-placeholder\">\n            <h1>{loadedErrorMessage}</h1>\n            <p id=\"error-symbol\">!</p>\n          </span>\n        )}\n        {imageLoaded && loadedErrorMessage.length === 0 && (\n          <img\n            src={imageUrl}\n            className=\"image\"\n            alt=\"Random cap\"\n            onLoad={this.imageRenderedStatus}\n          />\n        )}\n\n        <img\n          src={image || \"\"}\n          className=\"hide\"\n          onLoad={this.imageRenderedStatus(image)}\n          onError={this.handleImageLoadError}\n          alt=\"userImage\"\n        />\n      </Fragment>\n    );\n  }\n\n  handleImageLoadError = () => {\n    this.setState({\n      loadedErrorMessage: \"Unable to fetch image\",\n      imageUrl: \"https://picfsum.photos/230/300/?random\"\n    });\n    this.src = \"hello\";\n  };\n\n  imageRenderedStatus = image => () => {\n    this.setState({\n      imageLoaded: true,\n      imageUrl: image,\n      loadedErrorMessage: \"\"\n    });\n  };\n\n  render() {\n    const { imageData } = this.props;\n    return <div>{this.renderImage(imageData)}</div>;\n  }\n}\n\nexport default ImageCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport images from \"./helper/images\";\nimport NetworkDetector from \"./Hoc/NetworkDetector\";\nimport ImageCard from \"./ImageCard\";\n\nclass App extends Component {\n  state = {\n    loadedErrorMessage: \"\",\n    imageUrl: \"\",\n    imageLoaded: false\n  };\n\n  renderImages() {\n    return (\n      <div className=\"image-list\">\n        {images.map(data => (\n          <ImageCard key={data.id} imageData={data} />\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <p className=\"page-title\">The iDrag Imagery</p>\n        {this.renderImages()}\n      </div>\n    );\n  }\n}\n\nexport default NetworkDetector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}